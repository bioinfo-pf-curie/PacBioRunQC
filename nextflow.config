/*
 * -------------------------------------------------
 *  curie/PacBioRunQC Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  name = 'PacBioRunQC'
  description = 'Raw data quality controls pipeline'
  homePage = 'https://gitlab.curie.fr/data-analysis/PacBioRunQC'
  author = 'Institut Curie - Bioinformatics core facility'
  version = '2.1.0'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

/*
 * Global default params, used in configs
*/

params {
  container = '' 
  queue = false
  dataSet = null
  outdir = './results'

  // Defaults
  dataSet = null
  samplePlan = null  

  // Boilerplate options
  name = false
  help = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  metadata = "$baseDir/assets/metadata.tsv"
  tracedir = "${params.outdir}/pipeline_info"
  skip_OICCS = false
  skip_multiqc = false
}


/*
 * Configs and profiles
 */

// Additional configs

includeConfig 'conf/base.config'
includeConfig 'conf/geniac.config'
includeConfig 'conf/process.config'

// Profiles
profiles {
  singularity {
    includeConfig 'conf/singularity.config'
  }
  cluster {
    includeConfig 'conf/cluster.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/PacBioRunQC_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/PacBioRunQC_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/PacBioRunQC_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/PacBioRunQC_dag.svg"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###  Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###  Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
